this fork is for the purpose of hooking into DataMapper::Resource instead of ActiveRecord::Base.  this transition has not been done yet (as of July 11, new phone day).

TODO: here's the game plan for the switcheroo.  message me if anything is missing.

1. convert test models to dm
1.5 change specs
2. replace use of #constantize with Module.const_get if necessary (merbtasks.rb line 8)
3. see if dm properties will respond to #type and #name as in XssTerminate::InstanceMethods.sanitize_fields (xss_terminate.rb lines 29 & 31)
4. replace ar method before_save with dm before :save in XssTerminate::ClassMethods.xss_terminate (xss_terminate.rb line 10)

= merb_xss_terminate

  Plugin that auto-sanitizes data before it is saved in your DataMapper models.
  
  merb_xss_terminate is a port of xss_terminate from Luke Francl. The white list
  sanitizer and full sanitizer were lifted from Rails so you wouldn't have to 
  install ActionPack :)

  merb_xss_terminate makes stripping and sanitizing HTML stupid-simple. Install 
  and forget. And forget about forgetting to escape your output, because you 
  won't need to anymore.

  But merb_xss_terminate is also flexible. By default, it will strip all HTML 
  tags from user input. This is usually what you want, but sometimes you need 
  users to be able to enter HTML. The plugin allows you remove bad HTML with 
  your choice of two whitelist-based sanitizers, or to skip HTML sanitization 
  entirely on a per-field basis.

== Installation

  git clone git://github.com/schwabsauce/merb_xss_terminate.git
  cd merb_xss_terminate
  rake install
  add: dependency 'merb_xss_terminate' to init.rb

== HTML sanitization

  * Full-sanitizer: removes all HTML by stripping all the tags. Tags are 
    removed, but their content is not.
  * White-list sanitizer: removes bad HTML with Rails' HTML sanitizer methods.
    Bad tags are removed completely, including their content.
  * HTML5lib sanitization: removes bad HTML after parsing it with 
    {HTML5lib}[http://code.google.com/p/html5lib/], a library that parses HTML 
    like browsers do. It should be very tolerant of invalid HTML. Bad tags are 
    escaped, not removed.
  * Do nothing. You can chose not to process given fields.

== Usage

  Installing the plugin creates a +before_save+ hook that will strip HTML tags 
  from all string and text fields. No further configuration is necessary if this
  is what you want. To customize the behavior, you use the xss_terminate 
  class method in your models.
  
  To exempt some fields from sanitization, use the <tt>:except</tt> option 
  with a list of fields not to process. Note: Merb uses :exclude but ActiveRecord
  uses :except (so use :except here).
  
    class Comment < ActiveRecord::Base
      xss_terminate :except => [ :body ]
    end
  
  To sanitize HTML with Rails' sanitization, use the <tt>:sanitize</tt> option:
  
    class Review < ActiveRecord::Base
      xss_sanitize :sanitize => [ :body, :author_name]
    end

  To sanitize HTML with {HTML5Lib}[http://code.google.com/p/html5lib/] 
  use the <tt>:html5lib_sanitize</tt> option with a list of fields to sanitize:

    class Entry < ActiveRecord::Base
      xss_terminate :html5lib_sanitize => [ :body, :author_name ]
    end
   
  You can combine multiple options if you have some fields you would like skipped
  and others sanitized. Fields not listed in the option arrays will be stripped.
  
    class Message < ActiveRecord::Base
      xss_terminate :except => [ :body ], :sanitize => [ :title ]
    end

== Sanitizing existing records

  After installing merb_xss_terminate and configuring it to your liking, you can 
  run <tt>rake merb_xss_terminate:db:sanitize MODELS=Foo,Bar,Baz</tt> to execute 
  it against your existing records. This will load each model found and save it 
  again to invoke the before_save hook.

== Credits

  xss_terminate by {Luke Francl}[http://railspikes.com] and acts_as_sanitized by 
  {Alex Payne}[http://www.al3x.net].
  
  HTML5Lib sanitization by {Jacques Distler}[http://golem.ph.utexas.edu/~distler].
