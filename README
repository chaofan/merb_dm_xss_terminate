this fork is for the purpose of hooking into DataMapper::Resource instead of ActiveRecord::Base.

TODO: here's the game plan for the switcheroo.  message me if anything is missing.

1. convert test models to DataMapper [done]
1.5 change specs [wasn't necessary]
2. replace use of #constantize with Module.const_get if necessary (merbtasks.rb line 8) [done]
3. see if dm properties will respond to #type and #name as in XssTerminate::InstanceMethods.sanitize_fields (xss_terminate.rb lines 29 & 31) [done]
4. use append_inclusions instead of include as DataMapper::Resource is a module whereas ActiveRecord::Base is a class [done]
5. replace before_save with before :save in XssTerminate::ClassMethods.xss_terminate (xss_terminate.rb line 10) [done]
6. include in DataMapper::Resource instead of ActiveRecord::Base (merb_xss_terminate.rb line 7) [done]
7. make it possible to remove style tags from the whitelist (after I figure out if they are allowed now) (sanitizer.rb line 75)
8. name the gem merb_dm_xss_terminate so both this and the ar version can be installed [done]
9. consider renaming other instances of merb_xss_terminate to merb_dm_xss_terminate to avoid confusion for users [done except for git repo]
10. figure out if ENV['MODELS'] is also used by DataMapper
11. why do the specs pass when they are directly assigning foreign keys (DataMapper usually complains unless you assign objects to proxies, it doesn't let me assign integers to foreign keys (i.e. message belongs_to :person, message.person = nick works but message.person_id = 2 usually says person_id is not a public property))
12. write a spec that checks if my handling of custom string types was correct

= merb_dm_xss_terminate

  Plugin that auto-sanitizes data before it is saved in your DataMapper models.
  
  merb_dm_xss_terminate is a port of merb_xss_terminate by Ben Chiu, which is
  a port of xss_terminate from Luke Francl. The white list sanitizer and full
  sanitizer were lifted from Rails so you don't have to install ActionPack

  merb_dm_xss_terminate makes stripping and sanitizing HTML automatic. Install 
  and forget. And forget about remembering to escape your output, because you 
  won't need to anymore.

  But merb_dm_xss_terminate is also flexible. *By default, it will strip all HTML 
  tags from user input.* When you need users to be able to enter HTML, the plugin
  allows you remove bad HTML with your choice of two whitelist-based sanitizers, 
  or to skip HTML sanitization entirely on a per-field basis.

== Installation

  git clone git://github.com/schwabsauce/merb_xss_terminate.git
  cd merb_xss_terminate
  rake install
  add: dependency 'merb_dm_xss_terminate' to init.rb

== HTML sanitization

  * Full-sanitizer: removes all HTML by stripping all the tags. Tags are 
    removed, but their content is not.
  * White-list sanitizer: removes bad HTML with Rails' HTML sanitizer methods.
    Bad tags are removed completely, including their content.
  * HTML5lib sanitization: removes bad HTML after parsing it with 
    {HTML5lib}[http://code.google.com/p/html5lib/], a library that parses HTML 
    like browsers do. It should be very tolerant of invalid HTML. Bad tags are 
    escaped, not removed.
  * Do nothing. You can chose not to process given fields.

== Usage

  Installing the plugin creates a +before :save+ hook that will strip HTML tags 
  from all string and text fields. No further configuration is necessary if this
  is what you want. To customize the behavior, you use the xss_terminate 
  class method in your models.
  
  To exempt some fields from sanitization, use the <tt>:except</tt> option 
  with a list of fields not to process. Note: Merb uses :exclude but use :except here.
  
    class Comment
      xss_terminate :except => [ :body ]
    end
  
  To sanitize HTML with Rails' sanitization, use the <tt>:sanitize</tt> option:
  
    class Review
      xss_terminate :sanitize => [ :body, :author_name]
    end

  To sanitize HTML with {HTML5Lib}[http://code.google.com/p/html5lib/] 
  use the <tt>:html5lib_sanitize</tt> option with a list of fields to sanitize:

    class Entry
      xss_terminate :html5lib_sanitize => [ :body, :author_name ]
    end
   
  You can combine multiple options if you have some fields you would like skipped
  and others sanitized. Fields not listed in the option arrays will be stripped.
  
    class Message
      xss_terminate :except => [ :body ], :sanitize => [ :title ]
    end

== Sanitizing existing records

  After installing merb_xss_terminate and configuring it to your liking, you can 
  run <tt>rake merb_xss_terminate:db:sanitize MODELS=Foo,Bar,Baz</tt> to execute 
  it against your existing records. This will load each model found and save it 
  again to invoke the before_save hook.

== Credits

  merb_xss_terminate by {Ben Chiu}

  xss_terminate by {Luke Francl}[http://railspikes.com] and acts_as_sanitized by 
  {Alex Payne}[http://www.al3x.net].
  
  HTML5Lib sanitization by {Jacques Distler}[http://golem.ph.utexas.edu/~distler].
